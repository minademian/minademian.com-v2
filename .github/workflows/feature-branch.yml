name: Test Feature Branch

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name for sandbox deployment'
        required: true
        default: ''

permissions:
  contents: read  # Needed to checkout repository
  pull-requests: write  # Needed to comment on PRs
  issues: write  # Needed to comment on issues

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Verify dependencies
        run: pnpm list --depth=0

  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Run linting
        run: pnpm run lint

  typecheck:
    name: Type Checking
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Run type checking
        uses: ./.github/actions/typecheck

  e2e-tests:
    name: E2E Tests
    uses: ./.github/workflows/e2e.yml
    needs: [lint, typecheck]
    with:
      environment: 'development'
      fail_on_error: true  # Blocking: fail the pipeline if e2e tests fail

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [lint, typecheck, e2e-tests]
    outputs:
      artifacts-uploaded: ${{ steps.check-upload.outputs.artifacts-uploaded }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build and verify
        uses: ./.github/actions/build-project
        with:
          deployment-type: 'sandbox'
          branch-name: ${{ github.head_ref || github.ref_name }}

      - name: Verify build output exists
        run: |
          echo "Checking for build output..."
          if [ -d "out" ]; then
            echo "✅ out/ directory found"
            echo "Contents:"
            ls -la out/ | head -5
            echo "Total files: $(find out -type f | wc -l)"
          else
            echo "❌ out/ directory not found!"
            echo "Available directories:"
            ls -la
            exit 1
          fi

      - name: Upload build artifacts for sandbox
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sandbox-build-files
          path: out/
          retention-days: 3

      - name: Check upload success
        id: check-upload
        run: |
          if [ "${{ steps.upload-artifacts.outcome }}" = "success" ]; then
            echo "✅ Build artifacts uploaded successfully"
            echo "artifacts-uploaded=true" >> $GITHUB_OUTPUT
          else
            echo "❌ No artifacts were uploaded - stopping deployment pipeline"
            echo "artifacts-uploaded=false" >> $GITHUB_OUTPUT
          fi

  check-debug-flag:
    name: Check Debug Flag
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && needs.build.result == 'success'
    outputs:
      debug-enabled: ${{ steps.check.outputs.debug-enabled }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 10  # Get recent commits to check

      - name: Check for debug flag in commits
        id: check
        shell: bash
        run: |
          DEBUG_ENABLED="false"
          
          echo "🔍 Checking recent commit messages for debug flag..."
          
          # Check the last 5 commits for the debug flag
          if git log --oneline -n 5 --grep="\[DEBUG_DEPLOYMENT_INFORMATION\]" | grep -q "DEBUG_DEPLOYMENT_INFORMATION"; then
            DEBUG_ENABLED="true"
            echo "🐛 Debug enabled via commit message containing [DEBUG_DEPLOYMENT_INFORMATION]"
            echo "Found in commit:"
            git log --oneline -n 5 --grep="\[DEBUG_DEPLOYMENT_INFORMATION\]" | head -1
          else
            echo "ℹ️  No debug flag found in recent commit messages"
          fi
          
          echo "debug-enabled=$DEBUG_ENABLED" >> $GITHUB_OUTPUT
          echo "Final debug setting: $DEBUG_ENABLED"

  deploy:
    name: Deploy to Sandbox
    runs-on: ubuntu-latest
    needs: [build, check-debug-flag]
    if: always() && needs.build.result == 'success' && (needs.check-debug-flag.result == 'success' || needs.check-debug-flag.result == 'skipped')
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
      deployment-skipped: ${{ steps.deploy.outputs.deployment-skipped }}
      skip-reason: ${{ steps.deploy.outputs.skip-reason }}
      branch-name: ${{ steps.deploy.outputs.branch-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to sandbox
        id: deploy
        uses: ./.github/actions/deploy-to-remote-server
        with:
          deployment-mode: sandbox
          event-name: ${{ github.event_name }}
          ref: ${{ github.ref }}
          ref-name: ${{ github.ref_name }}
          branch-name: ${{ github.head_ref || github.ref_name || github.event.inputs.branch_name }}
          build-artifact-name: 'sandbox-build-files'
          build-artifacts-available: ${{ needs.build.outputs.artifacts-uploaded }}
          ssh-host: ${{ secrets.SFTP_HOST }}
          ssh-username: ${{ secrets.SFTP_USERNAME }}
          ssh-password: ${{ secrets.SFTP_PASSWORD }}
          base-path: ${{ secrets.DEPLOY_BASE_PATH }}
          debug-enabled: ${{ needs.check-debug-flag.outputs.debug-enabled }}

      - name: Comment on PR with preview link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ needs.configure-sandbox.outputs.deployment-url }}';
            const branchName = '${{ needs.configure-sandbox.outputs.branch-name }}';

            const comment = `## 🔍 Feature Branch Preview

            Your changes have been deployed to the sandbox environment!

            **Preview URL:** ${previewUrl}
            **Branch:** \`${branchName}\`
            **Commit:** \`${{ github.event.pull_request.head.sha }}\`

            This preview will be updated automatically when you push new commits to this PR.

            > **Note:** The sandbox deployment is for preview purposes only and may be cleaned up periodically.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
