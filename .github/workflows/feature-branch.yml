name: Test Feature Branch

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name for sandbox deployment'
        required: true
        default: ''

permissions:
  contents: read  # Needed to checkout repository
  pull-requests: write  # Needed to comment on PRs
  issues: write  # Needed to comment on issues

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Run linting
        run: pnpm run lint

  typecheck:
    name: Type Checking
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Run type checking
        uses: ./.github/actions/typecheck

  check-commit-type:
    name: Check Commit Type
    runs-on: ubuntu-latest
    needs: [typecheck]
    outputs:
      skip-e2e: ${{ steps.check.outputs.skip-e2e }}
      commit-type: ${{ steps.check.outputs.commit-type }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 10  # Get recent commits to check

      - name: Check for CI/Chore commits
        id: check
        shell: bash
        run: |
          SKIP_E2E="false"
          COMMIT_TYPE="feature"

          echo "üîç Checking recent commit messages for CI/Chore/Docs patterns..."

          # Check the last 3 commits for ci, chore, or docs patterns (conventional commits)
          # Matches: ci:, chore:, docs:, <any-type>(ci):
          if git log --oneline -n 3 | grep -qE "^[a-f0-9]+ ((ci|chore|docs):|[a-z]+\(ci\):)"; then
            SKIP_E2E="true"
            COMMIT_TYPE="ci-chore-docs"
            echo "üîß CI/Chore/Docs commit detected - skipping E2E tests"
            echo ""
            echo "Matching commits found:"
            git log --oneline -n 3 | grep -E "^[a-f0-9]+ ((ci|chore|docs):|[a-z]+\(ci\):)" || true
            echo ""
            echo "All recent commits:"
            git log --oneline -n 3
            echo ""
            echo "E2E tests will be skipped for CI/CD/documentation related changes."
          else
            echo "‚úÖ Feature commit detected - E2E tests will run"
            echo "Recent commits:"
            git log --oneline -n 3
          fi

          echo "skip-e2e=$SKIP_E2E" >> $GITHUB_OUTPUT
          echo "commit-type=$COMMIT_TYPE" >> $GITHUB_OUTPUT
          echo "Final E2E skip setting: $SKIP_E2E"

  e2e-tests:
    name: E2E Tests
    uses: ./.github/workflows/e2e.yml
    needs: [check-commit-type]
    with:
      environment: 'development'
      fail_on_error: true  # Blocking: fail the pipeline if e2e tests fail
      skip-e2e: ${{ needs.check-commit-type.outputs.skip-e2e == 'true' }}

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always() && needs.lint.result == 'success' && needs.typecheck.result == 'success' && (needs.e2e-tests.result == 'success' || needs.e2e-tests.result == 'skipped')
    outputs:
      artifacts-uploaded: ${{ steps.check-upload.outputs.artifacts-uploaded }}
      cache-hit: ${{ steps.build-cache.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Create cache key for build
        id: build-cache-key
        run: |
          # Create hash of files that affect build output
          SOURCE_HASH=$(find src app public -type f \( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o -name "*.json" -o -name "*.md" -o -name "*.css" -o -name "*.scss" \) -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          CONFIG_HASH=$(cat package.json pnpm-lock.yaml next.config.mjs tailwind.config.ts tsconfig.json postcss.config.js 2>/dev/null | sha256sum | cut -d' ' -f1)
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"

          echo "source-hash=$SOURCE_HASH" >> $GITHUB_OUTPUT
          echo "config-hash=$CONFIG_HASH" >> $GITHUB_OUTPUT
          echo "cache-key=build-$BRANCH_NAME-$SOURCE_HASH-$CONFIG_HASH" >> $GITHUB_OUTPUT

          echo "üîë Build cache key components:"
          echo "   Branch: $BRANCH_NAME"
          echo "   Source hash: $SOURCE_HASH"
          echo "   Config hash: $CONFIG_HASH"

      - name: Restore build cache
        id: build-cache
        uses: actions/cache@v3
        with:
          path: |
            out/
            .next/cache/
          key: ${{ steps.build-cache-key.outputs.cache-key }}
          restore-keys: |
            build-${{ github.head_ref || github.ref_name }}-

      - name: Build project (cache miss)
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: ./.github/actions/build-project
        with:
          deployment-type: 'sandbox'
          branch-name: ${{ github.head_ref || github.ref_name }}

      - name: Build status
        run: |
          if [ "${{ steps.build-cache.outputs.cache-hit }}" = "true" ]; then
            echo "üöÄ Build cache hit! Skipping build process."
            echo "   Cache key: ${{ steps.build-cache-key.outputs.cache-key }}"
            echo "   This significantly speeds up the CI pipeline."
          else
            echo "üèóÔ∏è Cache miss - build completed."
            echo "   New build cached for future runs."
          fi

      - name: Verify build output exists
        run: |
          echo "Checking for build output..."
          if [ -d "out" ]; then
            echo "‚úÖ out/ directory found"
            echo "Contents:"
            ls -la out/ | head -5
            echo "Total files: $(find out -type f | wc -l)"
          else
            echo "‚ùå out/ directory not found!"
            echo "Available directories:"
            ls -la
            exit 1
          fi

      - name: Upload build artifacts for sandbox
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sandbox-build-files-${{ github.run_number }}
          path: out/
          retention-days: 3

      - name: Check upload success
        id: check-upload
        run: |
          if [ "${{ steps.upload-artifacts.outcome }}" = "success" ]; then
            echo "‚úÖ Build artifacts uploaded successfully"
            if [ "${{ steps.build-cache.outputs.cache-hit }}" = "true" ]; then
              echo "   Source: Build cache (no rebuild needed)"
            else
              echo "   Source: Fresh build (cached for future runs)"
            fi
            echo "artifacts-uploaded=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No artifacts were uploaded - stopping deployment pipeline"
            echo "artifacts-uploaded=false" >> $GITHUB_OUTPUT
          fi

  check-debug-flag:
    name: Check Debug Flag
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && needs.build.result == 'success'
    outputs:
      debug-enabled: ${{ steps.check.outputs.debug-enabled }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 10  # Get recent commits to check

      - name: Check for debug flag in commits
        id: check
        shell: bash
        run: |
          DEBUG_ENABLED="false"

          echo "üîç Checking recent commit messages for debug flag..."

          # Check the last 5 commits for the debug flag
          if git log --oneline -n 5 --grep="\[DEBUG_DEPLOYMENT_INFORMATION\]" | grep -q "DEBUG_DEPLOYMENT_INFORMATION"; then
            DEBUG_ENABLED="true"
            echo "üêõ Debug enabled via commit message containing [DEBUG_DEPLOYMENT_INFORMATION]"
            echo "Found in commit:"
            git log --oneline -n 5 --grep="\[DEBUG_DEPLOYMENT_INFORMATION\]" | head -1
          else
            echo "‚ÑπÔ∏è  No debug flag found in recent commit messages"
          fi

          echo "debug-enabled=$DEBUG_ENABLED" >> $GITHUB_OUTPUT
          echo "Final debug setting: $DEBUG_ENABLED"

  deploy:
    name: Deploy to Sandbox
    runs-on: ubuntu-latest
    needs: [build, check-debug-flag, check-commit-type]
    if: always() && needs.build.result == 'success' && (needs.check-debug-flag.result == 'success' || needs.check-debug-flag.result == 'skipped') && (needs.check-commit-type.result == 'success' || needs.check-commit-type.result == 'skipped')
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
      deployment-skipped: ${{ steps.deploy.outputs.deployment-skipped }}
      skip-reason: ${{ steps.deploy.outputs.skip-reason }}
      branch-name: ${{ steps.deploy.outputs.branch-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to sandbox
        id: deploy
        uses: ./.github/actions/deploy-to-remote-server
        with:
          deployment-mode: sandbox
          event-name: ${{ github.event_name }}
          ref: ${{ github.ref }}
          ref-name: ${{ github.ref_name }}
          branch-name: ${{ github.head_ref || github.ref_name || github.event.inputs.branch_name }}
          build-artifact-name: 'sandbox-build-files-${{ github.run_number }}'
          build-artifacts-available: ${{ needs.build.outputs.artifacts-uploaded }}
          ssh-host: ${{ secrets.SFTP_HOST }}
          ssh-username: ${{ secrets.SFTP_USERNAME }}
          ssh-password: ${{ secrets.SFTP_PASSWORD }}
          base-path: ${{ secrets.DEPLOY_BASE_PATH }}
          debug-enabled: ${{ needs.check-debug-flag.outputs.debug-enabled }}

      - name: Comment on PR with preview link
        if: github.event_name == 'pull_request' && steps.deploy.outputs.deployment-skipped != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.deploy.outputs.deployment-url }}';
            const branchName = '${{ steps.deploy.outputs.branch-name }}' || '${{ github.head_ref || github.ref_name }}';

            // Skip if deployment was skipped
            if ('${{ steps.deploy.outputs.deployment-skipped }}' === 'true') {
              console.log('Deployment was skipped, not posting preview comment');
              return;
            }

            const cacheHit = '${{ needs.build.outputs.cache-hit }}';
            const buildStatus = cacheHit === 'true' ? 'üöÄ Build cache hit (fast deployment)' : 'üèóÔ∏è Fresh build (cached for future runs)';

            const comment = `## üîç Feature Branch Preview

            Your changes have been deployed to the sandbox environment!

            **Preview URL:** ${previewUrl || 'Deployment in progress...'}
            **Branch:** \`${branchName}\`
            **Commit:** \`${{ github.event.pull_request.head.sha }}\`
            **Build:** ${buildStatus}

            This preview will be updated automatically when you push new commits to this PR.

            > **Note:** The sandbox deployment is for preview purposes only and may be cleaned up periodically.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Comment on PR about E2E skip
        if: github.event_name == 'pull_request' && needs.check-commit-type.outputs.skip-e2e == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const commitType = '${{ needs.check-commit-type.outputs.commit-type }}';

            const comment = `## ‚ö° E2E Tests Skipped

            E2E tests were skipped for this CI/Chore commit to speed up the pipeline.

            **Reason:** Detected commit type: \`${commitType}\`
            **Commit:** \`${{ github.event.pull_request.head.sha }}\`

            E2E tests are automatically skipped for commits that start with:
            - \`ci\` (continuous integration changes)
            - \`chore\` (maintenance/housekeeping tasks)

            > This optimization reduces pipeline time for GitHub Actions changes that don't affect application functionality.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
