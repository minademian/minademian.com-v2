name: Release and Deploy

# Permissions needed for tag creation and repository access
permissions:
  contents: write  # Needed to create tags and push to repository
  pull-requests: write  # Needed to comment on PRs
  issues: write  # Needed to comment on issues

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: "Type of deployment"
        required: true
        type: choice
        default: "manual_tag_deploy"
        options:
          - "manual_tag_deploy"
          - "create_new_release"
      tag_to_deploy:
        description: "Tag to deploy (e.g., v2.2.3, v2.1.0)"
        required: false
        type: string
        default: "v2.2.3"
      create_github_release:
        description: "Create GitHub release for this tag? (for manual deployments)"
        required: false
        type: choice
        default: "false"
        options:
          - "false"
          - "true"
      deploy_target:
        description: "Deployment target"
        required: true
        default: "staging"
        type: choice
        options:
          - "staging"
          - "latest"
      release_type:
        description: "Release type (only for new releases)"
        required: false
        default: "none"
        type: choice
        options:
          - none
          - patch
          - minor
          - major
      enable_debug_output:
        description: "Enable detailed deployment debug information?"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

jobs:
  checkout-tag:
    name: Checkout Selected Tag
    runs-on: ubuntu-latest
    if: github.event.inputs.deployment_type == 'manual_tag_deploy'
    outputs:
      ref: ${{ steps.set-ref.outputs.ref }}
      tag: ${{ steps.set-ref.outputs.tag }}
    steps:
      - name: Set checkout reference
        id: set-ref
        run: |
          if [ "${{ github.event.inputs.tag_to_deploy }}" != "" ]; then
            echo "ref=${{ github.event.inputs.tag_to_deploy }}" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.inputs.tag_to_deploy }}" >> $GITHUB_OUTPUT
            echo "Deploying tag: ${{ github.event.inputs.tag_to_deploy }}"
          else
            echo "ref=${{ github.ref }}" >> $GITHUB_OUTPUT
            echo "tag=current" >> $GITHUB_OUTPUT
            echo "Deploying current ref: ${{ github.ref }}"
          fi

      - name: Checkout repository at tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.set-ref.outputs.ref }}

  validate:
    name: Pre-build Validation
    runs-on: ubuntu-latest
    if: always()
    needs: [checkout-tag]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.deployment_type == 'manual_tag_deploy' && github.event.inputs.tag_to_deploy || github.ref }}

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        uses: ./.github/actions/typecheck

  e2e-tests:
    name: E2E Tests
    uses: ./.github/workflows/e2e.yml
    needs: validate
    if: github.event.inputs.deployment_type != 'manual_tag_deploy'
    with:
      environment: 'production'
      fail_on_error: false  # Non-blocking: continue pipeline even if e2e tests fail

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [validate]  # Only depend on validate, not e2e-tests (non-blocking)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.deployment_type == 'manual_tag_deploy' && github.event.inputs.tag_to_deploy || github.ref }}

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build and verify
        uses: ./.github/actions/build-project
        with:
          deployment-type: 'production'

      - name: Verify build output exists
        run: |
          echo "Checking for build output..."
          if [ -d "out" ]; then
            echo "✅ out/ directory found"
            echo "Contents:"
            ls -la out/ | head -5
            echo "Total files: $(find out -type f | wc -l)"
          else
            echo "❌ out/ directory not found!"
            echo "Available directories:"
            ls -la
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: out/
          retention-days: 1

  create-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: [build, checkout-tag]
    if: always() && needs.build.result == 'success' && ((github.event_name == 'pull_request' && github.event.pull_request.merged == true) || (github.event_name == 'workflow_dispatch'))
    outputs:
      new-tag: ${{ steps.create-tag.outputs.new-tag }}
      should-create-release: ${{ steps.create-tag.outputs.should-create-release }}
      is-manual-release: ${{ steps.create-tag.outputs.is-manual-release }}
      release-type: ${{ steps.create-tag.outputs.release-type }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.deployment_type == 'manual_tag_deploy' && github.event.inputs.tag_to_deploy || github.ref }}
          fetch-depth: 0

      - name: Create Git Tag
        id: create-tag
        uses: ./.github/actions/create-git-tag
        with:
          event-name: ${{ github.event_name }}
          release-type: ${{ github.event.inputs.release_type || 'none' }}
          deployment-type: ${{ github.event.inputs.deployment_type || 'auto' }}
          pr-title: ${{ github.event.pull_request.title || '' }}
          pr-body: ${{ github.event.pull_request.body || '' }}
          pr-merged: ${{ github.event.pull_request.merged || 'false' }}
          manual-tag: ${{ github.event.inputs.tag_to_deploy || '' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  check-debug-flag:
    name: Check Debug Flag
    runs-on: ubuntu-latest
    needs: [create-tag]
    if: always() && (needs.create-tag.result == 'success' || needs.create-tag.result == 'skipped')
    outputs:
      debug-enabled: ${{ steps.check.outputs.debug-enabled }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.deployment_type == 'manual_tag_deploy' && github.event.inputs.tag_to_deploy || github.ref }}
          fetch-depth: 10  # Get recent commits to check

      - name: Check for debug flag
        id: check
        shell: bash
        run: |
          DEBUG_ENABLED="false"

          # Check manual workflow input first (highest priority)
          if [ "${{ github.event.inputs.enable_debug_output }}" = "true" ]; then
            DEBUG_ENABLED="true"
            echo "🐛 Debug enabled via manual workflow input"
          # For automatic deployments (PR merge), check recent commit messages
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "🔍 Checking recent commit messages for debug flag..."

            # Check the last 5 commits for the debug flag
            if git log --oneline -n 5 --grep="\[DEBUG_DEPLOYMENT_INFORMATION\]" | grep -q "DEBUG_DEPLOYMENT_INFORMATION"; then
              DEBUG_ENABLED="true"
              echo "🐛 Debug enabled via commit message containing [DEBUG_DEPLOYMENT_INFORMATION]"
              echo "Found in commit:"
              git log --oneline -n 5 --grep="\[DEBUG_DEPLOYMENT_INFORMATION\]" | head -1
            else
              echo "ℹ️  No debug flag found in recent commit messages"
            fi
          else
            echo "ℹ️  Debug output disabled by default"
          fi

          echo "debug-enabled=$DEBUG_ENABLED" >> $GITHUB_OUTPUT
          echo "Final debug setting: $DEBUG_ENABLED"

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [build, create-tag, check-debug-flag]
    if: always() && needs.build.result == 'success' && (github.event.inputs.deployment_type == 'manual_tag_deploy' || needs.create-tag.result == 'success' || needs.create-tag.result == 'skipped') && (needs.check-debug-flag.result == 'success' || needs.check-debug-flag.result == 'skipped')
    outputs:
      deployment-url: ${{ steps.deploy-website.outputs.deployment-url }}
      deployment-path: ${{ steps.deploy-website.outputs.deployment-path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.deployment_type == 'manual_tag_deploy' && github.event.inputs.tag_to_deploy || github.ref }}

      - name: Deploy website
        id: deploy-website
        uses: ./.github/actions/deploy-to-remote-server
        with:
          deployment-mode: ${{ github.event.inputs.deployment_type == 'manual_tag_deploy' && 'manual' || 'automatic' }}
          event-name: ${{ github.event_name }}
          ref: ${{ github.ref }}
          ref-name: ${{ github.ref_name }}
          git-tag: ${{ github.event.inputs.deployment_type == 'manual_tag_deploy' && github.event.inputs.tag_to_deploy || needs.create-tag.outputs.new-tag }}
          build-artifact-name: 'build-files'
          ssh-host: ${{ secrets.SFTP_HOST }}
          ssh-username: ${{ secrets.SFTP_USERNAME }}
          ssh-password: ${{ secrets.SFTP_PASSWORD }}
          base-path: ${{ secrets.DEPLOY_BASE_PATH }}
          # Debug information for enhanced logging
          deployment-type-input: ${{ github.event.inputs.deployment_type }}
          tag-to-deploy: ${{ github.event.inputs.tag_to_deploy }}
          deploy-target: ${{ github.event.inputs.deploy_target }}
          create-github-release: ${{ github.event.inputs.create_github_release }}
          create-tag-result: ${{ needs.create-tag.result }}
          is-manual-release: ${{ needs.create-tag.outputs.is-manual-release }}
          should-create-release: ${{ needs.create-tag.outputs.should-create-release }}
          debug-enabled: ${{ needs.check-debug-flag.outputs.debug-enabled }}

  publish-release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [create-tag, deploy]
    if: always() && needs.create-tag.outputs.should-create-release == 'true' && needs.deploy.result == 'success' && (github.event.inputs.create_github_release == 'true' || github.event.inputs.create_github_release == '')
    outputs:
      release-url: ${{ steps.create-github-release.outputs.release-url }}
      release-created: ${{ steps.create-github-release.outputs.release-created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.new-tag }}
          fetch-depth: 0

      - name: Create GitHub Release
        id: create-github-release
        uses: ./.github/actions/create-github-release
        with:
          tag: ${{ needs.create-tag.outputs.new-tag }}
          title: ${{ needs.create-tag.outputs.is-manual-release == 'true' && format('Manual Release {0}', needs.create-tag.outputs.new-tag) || format('Release {0}', needs.create-tag.outputs.new-tag) }}
          release-type: ${{ needs.create-tag.outputs.release-type }}
          deploy-target: ${{ github.event.inputs.deploy_target || 'production' }}
          deployment-url: ${{ needs.deploy.outputs.deployment-url }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
